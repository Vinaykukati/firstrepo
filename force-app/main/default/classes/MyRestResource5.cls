@RestResource(urlMapping='/TargetRecruit/resource/*')
global class MyRestResource5 {
	@HttpGet
    global static string getrecord(){
       JsonGenerator gen = Json.createGenerator(true);
        gen.writeStartObject();
        gen.writeStringField('type', 'object');
        gen.writeFieldName('properties');
        gen.writeStartObject();
        gen.writeFieldName('timeEntryDetails');
        gen.writeStartObject();
        gen.writeStringField('description', 'Time Entry Details is called upon entering the Time Application.  It will get the time configuration for the user and the latest list of time entries for the given timeperiod.');
        gen.writeStringField('type', 'object');
        gen.writeFieldName('properties');
        gen.writeStartObject();
        gen.writeFieldName('timeConfiguration');
        gen.writeStartObject();
        gen.writeStringField('description', 'Time Configuration for the User.');
        gen.writeStringField('type', 'array');
        gen.writeBooleanField('optional', true);
        gen.writeFieldName('items');
        gen.writeStartObject();
        gen.writeStringField('type', 'object');
        gen.writeFieldName('properties');
        gen.writeStartObject();
        gen.writeFieldName('positionID');
        gen.writeStartObject();
        gen.writeStringField('description', 'Position identifier a person may enter time against.');
        gen.writeStringField('type', 'object');
        gen.writeFieldName('properties');
        gen.writeStartObject();
        gen.writeFieldName('id');
        gen.writeStartObject();
        gen.writeStringField('description', 'Is the Identifier of the given instance of an entity.');
        gen.writeStringField('type', 'string');
        gen.writeEndObject();
        gen.writeFieldName('schemeName');
        gen.writeStartObject();
        gen.writeStringField('description', 'name of the identification scheme');
        gen.writeStringField('type', 'string');
        gen.writeBooleanField('optional', true);
        gen.writeEndObject();
        gen.writeFieldName('schemeAgencyName');
        gen.writeStartObject();
        gen.writeStringField('description', 'Agency responsible for the maintenance and definition of the identification scheme');
        gen.writeStringField('type', 'string');
        gen.writeBooleanField('optional', true);
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeFieldName('positionTitle');
        gen.writeStartObject();
        gen.writeStringField('description', 'The title of the position');
        gen.writeStringField('type', 'string');
        gen.writeBooleanField('optional', true);
        gen.writeEndObject();
        gen.writeFieldName('clockReferenceDateTime');
        gen.writeStartObject();
        gen.writeStringField('description', 'Clock Reference to be used to record time.  This allows the application to synchronize its time with that of the server.  Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.');
        gen.writeStringField('type', 'string');
        gen.writeStringField('format', 'date-time');
        gen.writeBooleanField('optional', true);
        gen.writeEndObject();
        gen.writeFieldName('clockReferenceDateTime');
        gen.writeStartObject();
        gen.writeStringField('description', 'Time Notation used when displaying time on the UI');
        gen.writeStringField('type', 'string');
        gen.writeFieldName('enum');
        gen.writeStartArray();
		gen.writeString('12h');
        gen.writeString('24h');
        gen.writeEndArray();
        gen.writeEndObject();
        gen.writeFieldName('noteIndicator');
        gen.writeStartObject();
        gen.writeStringField('description', 'True indicates that the System of Record supports the user entering notes / comments.  If the value is false then the notes / comments field will not be visible in the UI');
        gen.writeStringField('type', 'boolean');
        gen.writeBooleanField('optional', true);
        gen.writeBooleanField('default', false);
        gen.writeEndObject();
        gen.writeFieldName('privateNoteIndicator');
        gen.writeStartObject();
        gen.writeStringField('description', 'True indicates that the System of Record supports the private notes / comments, e.g. if the comment is entered by a manager / practitioner, the note author can specify if it should be visible by an employee.  Can be true only if the user is a manager / practitioner');
        gen.writeStringField('type', 'boolean');
        gen.writeBooleanField('optional', true);
        gen.writeBooleanField('default', false);
        gen.writeEndObject();
        gen.writeFieldName('freeFormNoteIndicator');
        gen.writeStartObject();
        gen.writeStringField('description', 'True indicates if a user can provide free form notes with a comment');
        gen.writeStringField('type', 'boolean');
        gen.writeBooleanField('optional', true);
        gen.writeBooleanField('default', true);
        gen.writeEndObject();
        gen.writeFieldName('longNoteIndicator');
        gen.writeStartObject();
        gen.writeStringField('description', 'True indicates that the System of Record supports the user entering notes / comments that exceed 250 characters in length.  If the value is false or omitted, the client should enforce the 250 charaters limit to avoid the errors');
        gen.writeStringField('type', 'boolean');
        gen.writeBooleanField('optional', true);
        gen.writeBooleanField('default', false);
        gen.writeEndObject();
        gen.writeFieldName('clockPolicy');
        gen.writeStartObject();
        gen.writeStringField('description', 'polices for the time clock paradigm for the user');
        gen.writeStringField('type', 'object');
        gen.writeBooleanField('optional', true);
        gen.writeFieldName('properties');
        gen.writeStartObject();
        gen.writeFieldName('entryButtons');
        gen.writeStartObject();
        
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
        gen.writeEndObject();
    return gen.getAsString();
    }
}